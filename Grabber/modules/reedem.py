import random
import string
import datetime
from telegram.ext import CommandHandler
from Grabber import application, user_collection

# 💬 Register this function if not already in your codebase
async def get_or_create_user(user):
    user_id = user.id
    user_data = await user_collection.find_one({'id': user_id})
    if not user_data:
        user_data = {
            'id': user_id,
            'first_name': user.first_name,
            'username': user.username,
            'balance': 0,
            'user_xp': 0,
            'last_daily_reward': datetime.datetime.utcnow() - datetime.timedelta(days=1)
        }
        await user_collection.insert_one(user_data)
    return user_data

# State holders
last_usage_time = {}
generated_codes = {}
sudo_user_ids = ["5147822244", "6507226414"]
log_sudo_user_ids = ["5147822244", "6507226414"]

def generate_random_code():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=5))

# 🗓️ /daily_code
async def daily_code(update, context):
    user = update.effective_user
    await get_or_create_user(user)

    user_id = user.id
    now = datetime.datetime.utcnow()

    if user_id in last_usage_time:
        time_diff = now - last_usage_time[user_id]
        if time_diff.total_seconds() < 300:
            await update.message.reply_text("⏳ You can only use this command every 5 minutes.")
            return

    code = generate_random_code()
    amount = random.randint(10, 5000000000)
    quantity = 1

    last_usage_time[user_id] = now
    generated_codes[code] = {'amount': amount, 'quantity': quantity}

    await update.message.reply_html(
        f"<b>Your daily code:</b>\n"
        f"<code>{code}</code>\n"
        f"<b>Amount:</b> {amount}\n"
        f"<b>Quantity:</b> {quantity}"
    )

    for sudo in log_sudo_user_ids:
        await context.bot.send_message(
            chat_id=int(sudo),
            text=(
                f"<b>Daily code generated by user {user_id}:</b>\n"
                f"<code>{code}</code>\n"
                f"<b>Amount:</b> {amount}\n"
                f"<b>Quantity:</b> {quantity}"
            ),
            parse_mode='HTML'
        )

# 🧑‍💻 /gen <amount> <quantity> [sudo only]
async def gen(update, context):
    if str(update.effective_user.id) not in sudo_user_ids:
        await update.message.reply_text("❌ You're not authorized to use this command.")
        return

    try:
        amount = int(context.args[0])
        quantity = int(context.args[1])
    except (IndexError, ValueError):
        await update.message.reply_text("Usage: /gen <amount> <quantity>")
        return

    code = generate_random_code()
    generated_codes[code] = {'amount': amount, 'quantity': quantity}

    await update.message.reply_html(
        f"<b>Generated code:</b>\n"
        f"<code>{code}</code>\n"
        f"<b>Amount:</b> {amount}\n"
        f"<b>Quantity:</b> {quantity}"
    )

    for sudo in log_sudo_user_ids:
        await context.bot.send_message(
            chat_id=int(sudo),
            text=(
                f"<b>Manual code generated by {update.effective_user.id}:</b>\n"
                f"<code>{code}</code>\n"
                f"<b>Amount:</b> {amount}\n"
                f"<b>Quantity:</b> {quantity}"
            ),
            parse_mode='HTML'
        )

# 🎟️ /redeem <code>
async def redeem(update, context):
    user = update.effective_user
    await get_or_create_user(user)

    code = " ".join(context.args).strip()
    user_id = user.id

    if not code:
        await update.message.reply_text("Please provide a code to redeem.")
        return

    if code not in generated_codes:
        await update.message.reply_text("❌ Invalid or expired code.")
        return

    data = generated_codes[code]
    if data['quantity'] <= 0:
        del generated_codes[code]
        await update.message.reply_text("⚠️ This code has already been fully redeemed.")
        return

    amount = data['amount']
    await user_collection.update_one(
        {'id': user_id},
        {'$inc': {'balance': amount}}
    )

    data['quantity'] -= 1
    if data['quantity'] == 0:
        del generated_codes[code]

    await update.message.reply_text(f"✅ Code redeemed! You received ${amount} Gold coins.")

    for sudo in log_sudo_user_ids:
        await context.bot.send_message(
            chat_id=int(sudo),
            text=(
                f"<b>Code redeemed by user {user_id}:</b>\n"
                f"<code>{code}</code>\n"
                f"<b>Amount:</b> {amount}\n"
                f"<b>Remaining:</b> {data['quantity']}"
            ),
            parse_mode='HTML'
        )

# Register handlers
application.add_handler(CommandHandler("daily_code", daily_code))
application.add_handler(CommandHandler("gen", gen))
application.add_handler(CommandHandler("redeem", redeem))